[CmdletBinding(SupportsShouldProcess=$True)]
Param (
	#[Parameter(mandatory=$true, ValueFromPipeline=$true)]
    [Parameter(mandatory=$true, ValueFromPipelineByPropertyName)]
    #[Parameter(mandatory=$true, ValueFromPipelineByPropertyName=$true)]
	[string]$PolicyName,
	[Parameter(mandatory=$true, ValueFromPipelineByPropertyName)]
	[ValidateSet("Client", "Antimalware")]
	[string]$PolicyType,
    [string]$SiteCode = "PS1",
	[int]$DesiredPriority
)

function Load-CMPSModule()
{
	if ($env:SMS_ADMIN_UI_PATH)
	{
		If (!(Get-Module -Name ConfigurationManager))
		{
			# Write-Log -Message "Found CM Console in Path, trying to import module." -Component "Load-CMPSModule" -Type 1
			Import-Module (Join-Path $(Split-Path $env:SMS_ADMIN_UI_PATH) ConfigurationManager.psd1) -Verbose:$false -Force
			if (Get-Module -Name ConfigurationManager)
			{
				# Write-Log -Message "$env:SMS_ADMIN_UI_PATH" -Component "Startup" -Type 1
				# Write-Log -Message "Successfully loaded CM Module from Installed Console" -Component "Load-CMPSModule" -Type 1
				$Global:PSModulePath = $true
			}
		}
		Else
		{
			Write-Verbose "CM Module is already loaded, no need to import module."
			$Global:PSModulePath = $true
		}
	}
	else
	{
		$Message = "CM Console is not in Path Variable. Unable to continue."
		# Write-Log -Message $Message -Component "Load-CMPSModule" -Type 3
		Write-Warning -Message $Message
		
		Set-Location $CurrentLocation
		
		exit 55378008
	}
	
}

# Import-Module -Name "$(split-path $Env:SMS_ADMIN_UI_PATH)\ConfigurationManager.psd1"
try {
	
	Load-CMPSModule

	$CurrentLocation = Get-Location
		
	Set-Location "$($SiteCode):\"

	switch ($PolicyType) {
		Client { 	
				$Policy = Get-CMClientSetting -Name $PolicyName

				[int]$CurrentPriority = (Get-CMClientSetting -Name $PolicyName).Priority
			}
		Antimalware { 
			$Policy = Get-CMAntimalwarePolicy -Name $PolicyName
			[int]$CurrentPriority = (Get-CMAntimalwarePolicy -Name $PolicyName).Priority
		}
	}

	If ($DesiredPriority -ge $CurrentPriority)
	{
		$PriorityChange = $DesiredPriority - $CurrentPriority
		Write-host "Decreasing priority $PriorityChange level(s)..."
		$action = 'Decrease'
	}
	elseif ($DesiredPriority -le $CurrentPriority)
	{
		$PriorityChange = $CurrentPriority - $DesiredPriority
		Write-host "Increasing priority $PriorityChange level(s)..."
		$action = 'Increase'
	}

	Write-Host "Changing priority for policy `"$PolicyName`"."
	foreach ($i in 1..$PriorityChange){

		switch ($PolicyType) {
			Client { 	
				Set-CMClientSettingGeneral -InputObject $Policy -Priority $action
			}
			Antimalware { 
				Set-CMAntimalwarePolicy -InputObject $Policy -Priority $action
			}
		}
		#$i
		Write-Output "Updating policy priority..."
	}
	Write-Output "Policy priority has been updated."

	switch ($PolicyType) {
		Client { 	
				[int]$Priority = (Get-CMClientSetting -Name $PolicyName).Priority
			}
		Antimalware { 
			[int]$Priority = (Get-CMAntimalwarePolicy -Name $PolicyName).Priority
		}
	}

	Write-Output "New priority for `"$PolicyName`": $Priority"
}
catch
{
	Write-warning "Something went wrong!"
}

Write-Output "End."

Set-Location $CurrentLocation